---
interface Props {
    id: string;
}

const {id} = Astro.props
---

<div class="modal" id={id}>
    <div class="modal-content">
        <button class="close-btn">&times</button>
        <div class="modal-body">
            <slot />
        </div>
    </div>
</div>

<style>
    .modal {
        display: none;
        position: fixed;
        top: 10%;
        left: 0;
        width: 100%;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.75);
        z-index: 10;
        backdrop-filter: blur(8px);
        overflow-y: auto;
        padding: 2rem 1rem;
        box-sizing: border-box;

        .modal-content {
            background: var(--glass-background);
            backdrop-filter: var(--glass-blur);
            -webkit-backdrop-filter: var(--glass-blur);
            border: 1px solid var(--glass-border);
            border-radius: 12px;
            box-shadow: var(--glass-shadow);
            position: relative;
            margin: auto;
            width: 90%;
            max-width: 800px;
            min-height: fit-content;
            max-height: calc(100vh - 4rem);
            animation: modalOpen 0.3s ease-out;
            overflow: hidden;

            @keyframe modalOpen {
                from {
                    opacity: ease-out;transform: stranslateY(-100%);
                }
                to {
                    opacity: 1;transform: translateY(0);
                }
            }

            .close-btn {
                position: absolute;
                right: 20px;
                top: 10px;
                font-size: 28px;
                font-weight: bold;
                color: white;
                background: none;
                border: none;
                cursor: pointer;
                padding: 0;
                width: 30px;
                height: 30px;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: color 0.2s;
                z-index: 2;

                &:hover {
                    color: rgba(255 255 255 0.8);
                }
            }

            .modal-body {
                color: var(--white-color);
                padding: 2rem;
                overflow-y: auto;
                max-height: calc(100vh - 8rem); /**calc(100vh - 8rem) */
            }
        }

        @media (max-width: 768px) {
            .modal {
              padding: 1rem;
            }

            .modal-content {
              width: 95%;
              margin: 0 auto;
            }

            .modal-body {
              padding: 1.5rem;
            }
        }
        /*@media (max-width: 480px) {
            .modal-content {
                
            }
        }*/
    }
</style>

<script>
    class ModalManager {
        private modals: Map<String, HTMLElement> = new Map();
        
        constructor() {
            this.initializeModals();
            this.setupEventListeners();
        }

        private initializeModals() {
            document.querySelectorAll('.modal').forEach(modal => {
                if(modal instanceof HTMLElement && modal.id) {
                    this.modals.set(modal.id, modal);
                }
            })
        }

        private setupEventListeners() {
            document.querySelectorAll('.close-btn').forEach(button => {
                button.addEventListener('click', () => {
                    const modal = button.closest('.modal');
                    if(modal) this.closeModal(modal.id)
                })
            })

            this.modals.forEach(modal => {
                modal.addEventListener('click', (e) => {
                    if (e.target === modal) {
                        this.closeModal(modal.id);
                    }
                })
            })
            document.addEventListener('keydown', (e) => {
                if (e.key == 'Escape') {
                    this.closeAllModals();
                }
            })
        }
        public openModal(modalId: string) {
            const modal = this.modals.get(modalId);
            if (modal) {
                modal.style.display = 'block'
                document.body.style.overflow = 'hidden'
            }
        }
        public closeModal(modalId: string) {
            const modal = this.modals.get(modalId)
            if (modal) {
                modal.style.display = 'none'
                document.body.style.overflow = ''
            }
        }
        private closeAllModals() {
            this.modals.forEach(modal => {
                modal.style.display = 'none'
            })
            document.body.style.overflow = ''
        }
    }
    const modalManager = new ModalManager();

    (window as any).modalManager = modalManager
</script>